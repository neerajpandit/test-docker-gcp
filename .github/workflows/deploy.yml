name: Deploy to Docker Hub and GCP Cloud Run

on:
  push:
    branches:
      - master  # Change if using another branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: 🚀 Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment and install dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'   # Update to the version you're using

      - name: Install dependencies
        run: npm install

      # Step 3: Run tests
      - name: Run Tests
        run: npm test

      # Step 4: Login to Docker Hub
      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 5: Build and Push Docker Image to Docker Hub
      - name: 🐳 Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest

  deploy-to-gcp:
    runs-on: ubuntu-latest
    needs: build-and-push  # Ensure this job runs after build-and-push

    steps:
      # Step 1: Authenticate to Google Cloud
      - name: 🔑 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 2: Deploy to Google Cloud Run
      # - name: 🚀 Deploy to Cloud Run
      #   run: |
      #     gcloud run deploy {{ secrets.GCP_SERVICE_NAME }} \
      #       --image={{ secrets.DOCKER_HUB_USERNAME }}/{{ secrets.DOCKER_HUB_REPO_NAME }}:latest \
      #       --platform=managed \
      #       --region={{ secrets.GCP_REGION }} \
      #       --allow-unauthenticated

      # Step 2: SSH into the VM and deploy the container
      - name: 🚀 Deploy to GCP VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_IP }}  # Your VM's external IP
          username: ${{ secrets.GCP_VM_USERNAME }}  # Your VM SSH username
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}  # SSH private key for authentication
          script: |
            # Stop and remove the existing container (if any)
            docker stop my-app-container || true
            docker rm my-app-container || true
            
            # Pull the latest image from Docker Hub
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            
            # Run the new container
            docker run -d --name my-app-container -p 80:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest


      # Step 3: Send Slack Notification
      - name: Send Slack Notification
        if: always()  # Runs regardless of success or failure
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: '#deployment-gcp'  # Replace with your Slack channel name
          slack-message: |
            🚀 *Deployment Status*: ${{ job.status }}
            📌 *Repository*: ${{ github.repository }}
            🔀 *Branch*: ${{ github.ref_name }}
            🔢 *Commit Hash*: ${{ github.sha }}
            🧑‍💻 *Triggered by*: ${{ github.actor }}
            🔗 *Run URL*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}>
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}










# name: Deploy to GCP VM

# on:
#   push:
#     branches:
#       - master  # Change if using another branch

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout Code
#       - name: 🚀 Checkout Code
#         uses: actions/checkout@v2

#       # Step 2: Set up Node.js environment and install dependencies
#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '23.6.1'   # Update to the version you're using

#       - name: Install dependencies
#         run: npm install

#       # Step 3: Run tests
#       - name: Run Tests
#         run: npm test

#       # Step 4: If tests pass, proceed with deployment
#       - name: 🔑 SSH into GCP VM and Deploy
#         if: success()  # Only runs if the previous steps are successful
#         uses: appleboy/ssh-action@v0.1.10
#         with:
#           host: ${{ secrets.GCP_VM_IP }}
#           username: ${{ secrets.GCP_VM_USER }}
#           key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
#           script: |
#             echo "🔄 Pulling latest code..."
#             cd ~/node_docker_gcp
#             git pull origin master  # Update code

#             echo "🚀 Building Docker Image..."
#             docker build -t node_docker_gcp .

#             echo "⛔ Stopping old container..."
#             docker stop node_container || true
#             docker rm node_container || true

#             echo "🚢 Running new container..."
#             docker run -d -p 3000:3000 --name node_container node_docker_gcp

#             echo "✅ Deployment complete!"

#       # Step 5: Send Slack Notification
#       - name: Send Slack Notification
#         if: always()  # Runs regardless of success or failure
#         uses: slackapi/slack-github-action@v1
#         with:
#           channel-id: '#deployment-gcp'  # Replace with your Slack channel name
#           slack-message: |
#             🚀 *Deployment Status*: ${{ job.status }}
#             📌 *Repository*: ${{ github.repository }}
#             🔀 *Branch*: ${{ github.ref_name }}
#             🔢 *Commit Hash*: ${{ github.sha }}
#             🧑‍💻 *Triggered by*: ${{ github.actor }}
#             🔗 *Run URL*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}>
#         env:
#           SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}


          
          